const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

let keys = {};
let bullets = [];
let enemies = [];
let powerUps = [];
let achievements = [];
let score = 0;
let highScore = parseInt(localStorage.getItem("highScore")) || 0;
let lives = 3;
let level = 1;
let isPaused = false;
let gameRunning = false;

document.addEventListener("keydown", (e) => {
  keys[e.code] = true;
  if (e.code === "Escape") togglePause();
});

document.addEventListener("keyup", (e) => {
  keys[e.code] = false;
});

canvas.addEventListener("click", () => {
  if (!gameRunning) startGame();
});

function startGame() {
  document.getElementById("mainMenu").style.display = "none";
  gameRunning = true;
  lives = 3;
  score = 0;
  level = 1;
  bullets = [];
  enemies = [];
  powerUps = [];
  achievements = [];
  spawnPlayer();
  requestAnimationFrame(gameLoop);
}

function togglePause() {
  if (!gameRunning) return;
  isPaused = !isPaused;
  document.getElementById("pauseMenu").style.display = isPaused ? "block" : "none";
  if (!isPaused) requestAnimationFrame(gameLoop);
}
const player = {
  x: canvas.width / 2,
  y: canvas.height - 60,
  width: 40,
  height: 20,
  speed: 5,
  shootCooldown: 0,
};

function spawnPlayer() {
  player.x = canvas.width / 2;
  player.y = canvas.height - 60;
  player.shootCooldown = 0;
}

function shoot() {
  if (player.shootCooldown <= 0) {
    bullets.push({ x: player.x + player.width / 2 - 2, y: player.y, width: 4, height: 10 });
    player.shootCooldown = 10;
  }
}

function spawnEnemy() {
  const size = 30 + Math.random() * 20;
  enemies.push({
    x: Math.random() * (canvas.width - size),
    y: -size,
    width: size,
    height: size,
    speed: 1 + level * 0.2,
  });
}

function spawnPowerUp() {
  powerUps.push({
    x: Math.random() * (canvas.width - 20),
    y: -20,
    width: 20,
    height: 20,
    speed: 2,
    type: "triple",
  });
}
function resumeGame() {
  isPaused = false;
  document.getElementById("pauseMenu").style.display = "none";
  requestAnimationFrame(gameLoop);
}
